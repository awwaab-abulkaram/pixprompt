import React, { useState, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import './DynamicPage.css';

function DynamicPage() {
  const [submitted, setSubmitted] = useState(false);
  const [inputValue, setInputValue] = useState('');
  const [displayedPrompt, setDisplayedPrompt] = useState('');
  const [metrics, setMetrics] = useState(null); // State for metrics
  const [showMetrics, setShowMetrics] = useState(false); // State for toggling metrics visibility
  const contentRef = useRef(null);
  const navigate = useNavigate();

  const handleSubmit = (e) => {
    e.preventDefault();
    if (inputValue.trim()) {
      setSubmitted(false);
      setDisplayedPrompt(inputValue);
      setMetrics(null); // Reset metrics
      setShowMetrics(false); // Hide metrics on new submission
      setTimeout(() => {
        setSubmitted(true);
        fetchMetrics(inputValue); // Fetch metrics after submission
        contentRef.current?.scrollIntoView({ behavior: 'smooth' });
      }, 100);
    }
  };

  const fetchMetrics = async (prompt) => {
    try {
      // Replace this with your backend API endpoint
      const response = await fetch(`/api/get-metrics?prompt=${encodeURIComponent(prompt)}`);
      const data = await response.json();
      setMetrics(data); // Set the metrics from the backend
    } catch (error) {
      console.error('Error fetching metrics:', error);
    }
  };

  const toggleMetrics = () => {
    setShowMetrics((prev) => !prev);
  };

  const navigateToHome = () => {
    navigate('/');
  };

  return (
    <div className="page-container">
      <div className="top-heading">
        <h1 onClick={navigateToHome}>PixPrompt</h1>
      </div>

      <div className="input-section">
        <h1>Text-to-Image Synthesis</h1>
        <form onSubmit={handleSubmit}>
          <input
            type="text"
            placeholder="Enter a prompt..."
            value={inputValue}
            onChange={(e) => setInputValue(e.target.value)}
            required
          />
          <button type="submit">Submit</button>
        </form>
      </div>

      {submitted && (
        <div className="content-section" ref={contentRef}>
          <h2>
            Images Generated for: "{displayedPrompt}" by GAN models
          </h2>
          <div className="image-row">
            <div className="image-block">
              <img src="https://via.placeholder.com/300" alt="First" className="image" />
              <p className="image-description">IMAGE GENERATED BY STACK GAN MODEL</p>
            </div>
            <div className="image-block">
              <img src="https://via.placeholder.com/300" alt="Second" className="image" />
              <p className="image-description">IMAGE GENERATED BY DF GAN MODEL</p>
            </div>
            <div className="image-block">
              <img src="https://via.placeholder.com/300" alt="Third" className="image" />
              <p className="image-description">IMAGE GENERATED BY ATTENTION GAN MODEL</p>
            </div>
          </div>

          <div>
          <h3 className="comparative-heading">Comparative Analysis of GAN Models</h3>
          </div>


          {/* Button to show metrics */}
          <div className="metrics-toggle">
            <button onClick={toggleMetrics}>To Know More...</button>
          </div>

          {/* Metrics section displayed conditionally */}
          {showMetrics && (
            <div className="metrics-section">
              <h3>Evaluation Metrics</h3>
              <div className="metrics-row">
                <div className="metric-block">
                  <h4>STACK GAN</h4>
                  <p>FID Score: {metrics?.stackGan?.fid || 'N/A'}</p>
                  <p>Inception Score: {metrics?.stackGan?.inception || 'N/A'}</p>
                </div>
                <div className="metric-block">
                  <h4>DF GAN</h4>
                  <p>FID Score: {metrics?.dfGan?.fid || 'N/A'}</p>
                  <p>Inception Score: {metrics?.dfGan?.inception || 'N/A'}</p>
                </div>
                <div className="metric-block">
                  <h4>ATTENTION GAN</h4>
                  <p>FID Score: {metrics?.attentionGan?.fid || 'N/A'}</p>
                  <p>Inception Score: {metrics?.attentionGan?.inception || 'N/A'}</p>
                </div>
              </div>
            </div>
          )}
        </div>
      )}
    </div>
  );
}

export default DynamicPage;
